
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ApiType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ApiType
 * 
 */
export type ApiTypeModel = runtime.Types.Result.DefaultSelection<Prisma.$ApiTypePayload>

export type AggregateApiType = {
  _count: ApiTypeCountAggregateOutputType | null
  _min: ApiTypeMinAggregateOutputType | null
  _max: ApiTypeMaxAggregateOutputType | null
}

export type ApiTypeMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ApiTypeMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ApiTypeCountAggregateOutputType = {
  id: number
  name: number
  description: number
  fields: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ApiTypeMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type ApiTypeMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type ApiTypeCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  fields?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ApiTypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ApiType to aggregate.
   */
  where?: Prisma.ApiTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApiTypes to fetch.
   */
  orderBy?: Prisma.ApiTypeOrderByWithRelationInput | Prisma.ApiTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ApiTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApiTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApiTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ApiTypes
  **/
  _count?: true | ApiTypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ApiTypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ApiTypeMaxAggregateInputType
}

export type GetApiTypeAggregateType<T extends ApiTypeAggregateArgs> = {
      [P in keyof T & keyof AggregateApiType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateApiType[P]>
    : Prisma.GetScalarType<T[P], AggregateApiType[P]>
}




export type ApiTypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ApiTypeWhereInput
  orderBy?: Prisma.ApiTypeOrderByWithAggregationInput | Prisma.ApiTypeOrderByWithAggregationInput[]
  by: Prisma.ApiTypeScalarFieldEnum[] | Prisma.ApiTypeScalarFieldEnum
  having?: Prisma.ApiTypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ApiTypeCountAggregateInputType | true
  _min?: ApiTypeMinAggregateInputType
  _max?: ApiTypeMaxAggregateInputType
}

export type ApiTypeGroupByOutputType = {
  id: string
  name: string
  description: string | null
  fields: runtime.JsonValue
  createdAt: Date
  updatedAt: Date
  _count: ApiTypeCountAggregateOutputType | null
  _min: ApiTypeMinAggregateOutputType | null
  _max: ApiTypeMaxAggregateOutputType | null
}

type GetApiTypeGroupByPayload<T extends ApiTypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ApiTypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ApiTypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ApiTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ApiTypeGroupByOutputType[P]>
      }
    >
  > 



export type ApiTypeWhereInput = {
  AND?: Prisma.ApiTypeWhereInput | Prisma.ApiTypeWhereInput[]
  OR?: Prisma.ApiTypeWhereInput[]
  NOT?: Prisma.ApiTypeWhereInput | Prisma.ApiTypeWhereInput[]
  id?: Prisma.StringFilter<"ApiType"> | string
  name?: Prisma.StringFilter<"ApiType"> | string
  description?: Prisma.StringNullableFilter<"ApiType"> | string | null
  fields?: Prisma.JsonFilter<"ApiType">
  createdAt?: Prisma.DateTimeFilter<"ApiType"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ApiType"> | Date | string
}

export type ApiTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  fields?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ApiTypeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.ApiTypeWhereInput | Prisma.ApiTypeWhereInput[]
  OR?: Prisma.ApiTypeWhereInput[]
  NOT?: Prisma.ApiTypeWhereInput | Prisma.ApiTypeWhereInput[]
  description?: Prisma.StringNullableFilter<"ApiType"> | string | null
  fields?: Prisma.JsonFilter<"ApiType">
  createdAt?: Prisma.DateTimeFilter<"ApiType"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ApiType"> | Date | string
}, "id" | "name">

export type ApiTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  fields?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ApiTypeCountOrderByAggregateInput
  _max?: Prisma.ApiTypeMaxOrderByAggregateInput
  _min?: Prisma.ApiTypeMinOrderByAggregateInput
}

export type ApiTypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.ApiTypeScalarWhereWithAggregatesInput | Prisma.ApiTypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.ApiTypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ApiTypeScalarWhereWithAggregatesInput | Prisma.ApiTypeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ApiType"> | string
  name?: Prisma.StringWithAggregatesFilter<"ApiType"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"ApiType"> | string | null
  fields?: Prisma.JsonWithAggregatesFilter<"ApiType">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ApiType"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ApiType"> | Date | string
}

export type ApiTypeCreateInput = {
  id?: string
  name: string
  description?: string | null
  fields: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ApiTypeUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  fields: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ApiTypeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fields?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApiTypeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fields?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApiTypeCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  fields: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ApiTypeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fields?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApiTypeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  fields?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ApiTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  fields?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ApiTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ApiTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type ApiTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  fields?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["apiType"]>

export type ApiTypeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  fields?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["apiType"]>

export type ApiTypeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  fields?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["apiType"]>

export type ApiTypeSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  fields?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ApiTypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "fields" | "createdAt" | "updatedAt", ExtArgs["result"]["apiType"]>

export type $ApiTypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ApiType"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    fields: runtime.JsonValue
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["apiType"]>
  composites: {}
}

export type ApiTypeGetPayload<S extends boolean | null | undefined | ApiTypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ApiTypePayload, S>

export type ApiTypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ApiTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ApiTypeCountAggregateInputType | true
  }

export interface ApiTypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApiType'], meta: { name: 'ApiType' } }
  /**
   * Find zero or one ApiType that matches the filter.
   * @param {ApiTypeFindUniqueArgs} args - Arguments to find a ApiType
   * @example
   * // Get one ApiType
   * const apiType = await prisma.apiType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ApiTypeFindUniqueArgs>(args: Prisma.SelectSubset<T, ApiTypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ApiTypeClient<runtime.Types.Result.GetResult<Prisma.$ApiTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ApiType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ApiTypeFindUniqueOrThrowArgs} args - Arguments to find a ApiType
   * @example
   * // Get one ApiType
   * const apiType = await prisma.apiType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ApiTypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ApiTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ApiTypeClient<runtime.Types.Result.GetResult<Prisma.$ApiTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ApiType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiTypeFindFirstArgs} args - Arguments to find a ApiType
   * @example
   * // Get one ApiType
   * const apiType = await prisma.apiType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ApiTypeFindFirstArgs>(args?: Prisma.SelectSubset<T, ApiTypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__ApiTypeClient<runtime.Types.Result.GetResult<Prisma.$ApiTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ApiType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiTypeFindFirstOrThrowArgs} args - Arguments to find a ApiType
   * @example
   * // Get one ApiType
   * const apiType = await prisma.apiType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ApiTypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ApiTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ApiTypeClient<runtime.Types.Result.GetResult<Prisma.$ApiTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ApiTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ApiTypes
   * const apiTypes = await prisma.apiType.findMany()
   * 
   * // Get first 10 ApiTypes
   * const apiTypes = await prisma.apiType.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const apiTypeWithIdOnly = await prisma.apiType.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ApiTypeFindManyArgs>(args?: Prisma.SelectSubset<T, ApiTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApiTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ApiType.
   * @param {ApiTypeCreateArgs} args - Arguments to create a ApiType.
   * @example
   * // Create one ApiType
   * const ApiType = await prisma.apiType.create({
   *   data: {
   *     // ... data to create a ApiType
   *   }
   * })
   * 
   */
  create<T extends ApiTypeCreateArgs>(args: Prisma.SelectSubset<T, ApiTypeCreateArgs<ExtArgs>>): Prisma.Prisma__ApiTypeClient<runtime.Types.Result.GetResult<Prisma.$ApiTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ApiTypes.
   * @param {ApiTypeCreateManyArgs} args - Arguments to create many ApiTypes.
   * @example
   * // Create many ApiTypes
   * const apiType = await prisma.apiType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ApiTypeCreateManyArgs>(args?: Prisma.SelectSubset<T, ApiTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ApiTypes and returns the data saved in the database.
   * @param {ApiTypeCreateManyAndReturnArgs} args - Arguments to create many ApiTypes.
   * @example
   * // Create many ApiTypes
   * const apiType = await prisma.apiType.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ApiTypes and only return the `id`
   * const apiTypeWithIdOnly = await prisma.apiType.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ApiTypeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ApiTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApiTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ApiType.
   * @param {ApiTypeDeleteArgs} args - Arguments to delete one ApiType.
   * @example
   * // Delete one ApiType
   * const ApiType = await prisma.apiType.delete({
   *   where: {
   *     // ... filter to delete one ApiType
   *   }
   * })
   * 
   */
  delete<T extends ApiTypeDeleteArgs>(args: Prisma.SelectSubset<T, ApiTypeDeleteArgs<ExtArgs>>): Prisma.Prisma__ApiTypeClient<runtime.Types.Result.GetResult<Prisma.$ApiTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ApiType.
   * @param {ApiTypeUpdateArgs} args - Arguments to update one ApiType.
   * @example
   * // Update one ApiType
   * const apiType = await prisma.apiType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ApiTypeUpdateArgs>(args: Prisma.SelectSubset<T, ApiTypeUpdateArgs<ExtArgs>>): Prisma.Prisma__ApiTypeClient<runtime.Types.Result.GetResult<Prisma.$ApiTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ApiTypes.
   * @param {ApiTypeDeleteManyArgs} args - Arguments to filter ApiTypes to delete.
   * @example
   * // Delete a few ApiTypes
   * const { count } = await prisma.apiType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ApiTypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, ApiTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ApiTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ApiTypes
   * const apiType = await prisma.apiType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ApiTypeUpdateManyArgs>(args: Prisma.SelectSubset<T, ApiTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ApiTypes and returns the data updated in the database.
   * @param {ApiTypeUpdateManyAndReturnArgs} args - Arguments to update many ApiTypes.
   * @example
   * // Update many ApiTypes
   * const apiType = await prisma.apiType.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ApiTypes and only return the `id`
   * const apiTypeWithIdOnly = await prisma.apiType.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ApiTypeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ApiTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApiTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ApiType.
   * @param {ApiTypeUpsertArgs} args - Arguments to update or create a ApiType.
   * @example
   * // Update or create a ApiType
   * const apiType = await prisma.apiType.upsert({
   *   create: {
   *     // ... data to create a ApiType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ApiType we want to update
   *   }
   * })
   */
  upsert<T extends ApiTypeUpsertArgs>(args: Prisma.SelectSubset<T, ApiTypeUpsertArgs<ExtArgs>>): Prisma.Prisma__ApiTypeClient<runtime.Types.Result.GetResult<Prisma.$ApiTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ApiTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiTypeCountArgs} args - Arguments to filter ApiTypes to count.
   * @example
   * // Count the number of ApiTypes
   * const count = await prisma.apiType.count({
   *   where: {
   *     // ... the filter for the ApiTypes we want to count
   *   }
   * })
  **/
  count<T extends ApiTypeCountArgs>(
    args?: Prisma.Subset<T, ApiTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ApiTypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ApiType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ApiTypeAggregateArgs>(args: Prisma.Subset<T, ApiTypeAggregateArgs>): Prisma.PrismaPromise<GetApiTypeAggregateType<T>>

  /**
   * Group by ApiType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ApiTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ApiTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ApiTypeGroupByArgs['orderBy'] }
      : { orderBy?: ApiTypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ApiTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ApiType model
 */
readonly fields: ApiTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ApiType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ApiTypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ApiType model
 */
export interface ApiTypeFieldRefs {
  readonly id: Prisma.FieldRef<"ApiType", 'String'>
  readonly name: Prisma.FieldRef<"ApiType", 'String'>
  readonly description: Prisma.FieldRef<"ApiType", 'String'>
  readonly fields: Prisma.FieldRef<"ApiType", 'Json'>
  readonly createdAt: Prisma.FieldRef<"ApiType", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ApiType", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ApiType findUnique
 */
export type ApiTypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
  /**
   * Filter, which ApiType to fetch.
   */
  where: Prisma.ApiTypeWhereUniqueInput
}

/**
 * ApiType findUniqueOrThrow
 */
export type ApiTypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
  /**
   * Filter, which ApiType to fetch.
   */
  where: Prisma.ApiTypeWhereUniqueInput
}

/**
 * ApiType findFirst
 */
export type ApiTypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
  /**
   * Filter, which ApiType to fetch.
   */
  where?: Prisma.ApiTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApiTypes to fetch.
   */
  orderBy?: Prisma.ApiTypeOrderByWithRelationInput | Prisma.ApiTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ApiTypes.
   */
  cursor?: Prisma.ApiTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApiTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApiTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ApiTypes.
   */
  distinct?: Prisma.ApiTypeScalarFieldEnum | Prisma.ApiTypeScalarFieldEnum[]
}

/**
 * ApiType findFirstOrThrow
 */
export type ApiTypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
  /**
   * Filter, which ApiType to fetch.
   */
  where?: Prisma.ApiTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApiTypes to fetch.
   */
  orderBy?: Prisma.ApiTypeOrderByWithRelationInput | Prisma.ApiTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ApiTypes.
   */
  cursor?: Prisma.ApiTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApiTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApiTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ApiTypes.
   */
  distinct?: Prisma.ApiTypeScalarFieldEnum | Prisma.ApiTypeScalarFieldEnum[]
}

/**
 * ApiType findMany
 */
export type ApiTypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
  /**
   * Filter, which ApiTypes to fetch.
   */
  where?: Prisma.ApiTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ApiTypes to fetch.
   */
  orderBy?: Prisma.ApiTypeOrderByWithRelationInput | Prisma.ApiTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ApiTypes.
   */
  cursor?: Prisma.ApiTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ApiTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ApiTypes.
   */
  skip?: number
  distinct?: Prisma.ApiTypeScalarFieldEnum | Prisma.ApiTypeScalarFieldEnum[]
}

/**
 * ApiType create
 */
export type ApiTypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
  /**
   * The data needed to create a ApiType.
   */
  data: Prisma.XOR<Prisma.ApiTypeCreateInput, Prisma.ApiTypeUncheckedCreateInput>
}

/**
 * ApiType createMany
 */
export type ApiTypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ApiTypes.
   */
  data: Prisma.ApiTypeCreateManyInput | Prisma.ApiTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ApiType createManyAndReturn
 */
export type ApiTypeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
  /**
   * The data used to create many ApiTypes.
   */
  data: Prisma.ApiTypeCreateManyInput | Prisma.ApiTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ApiType update
 */
export type ApiTypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
  /**
   * The data needed to update a ApiType.
   */
  data: Prisma.XOR<Prisma.ApiTypeUpdateInput, Prisma.ApiTypeUncheckedUpdateInput>
  /**
   * Choose, which ApiType to update.
   */
  where: Prisma.ApiTypeWhereUniqueInput
}

/**
 * ApiType updateMany
 */
export type ApiTypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ApiTypes.
   */
  data: Prisma.XOR<Prisma.ApiTypeUpdateManyMutationInput, Prisma.ApiTypeUncheckedUpdateManyInput>
  /**
   * Filter which ApiTypes to update
   */
  where?: Prisma.ApiTypeWhereInput
  /**
   * Limit how many ApiTypes to update.
   */
  limit?: number
}

/**
 * ApiType updateManyAndReturn
 */
export type ApiTypeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
  /**
   * The data used to update ApiTypes.
   */
  data: Prisma.XOR<Prisma.ApiTypeUpdateManyMutationInput, Prisma.ApiTypeUncheckedUpdateManyInput>
  /**
   * Filter which ApiTypes to update
   */
  where?: Prisma.ApiTypeWhereInput
  /**
   * Limit how many ApiTypes to update.
   */
  limit?: number
}

/**
 * ApiType upsert
 */
export type ApiTypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
  /**
   * The filter to search for the ApiType to update in case it exists.
   */
  where: Prisma.ApiTypeWhereUniqueInput
  /**
   * In case the ApiType found by the `where` argument doesn't exist, create a new ApiType with this data.
   */
  create: Prisma.XOR<Prisma.ApiTypeCreateInput, Prisma.ApiTypeUncheckedCreateInput>
  /**
   * In case the ApiType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ApiTypeUpdateInput, Prisma.ApiTypeUncheckedUpdateInput>
}

/**
 * ApiType delete
 */
export type ApiTypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
  /**
   * Filter which ApiType to delete.
   */
  where: Prisma.ApiTypeWhereUniqueInput
}

/**
 * ApiType deleteMany
 */
export type ApiTypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ApiTypes to delete
   */
  where?: Prisma.ApiTypeWhereInput
  /**
   * Limit how many ApiTypes to delete.
   */
  limit?: number
}

/**
 * ApiType without action
 */
export type ApiTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiType
   */
  select?: Prisma.ApiTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiType
   */
  omit?: Prisma.ApiTypeOmit<ExtArgs> | null
}
