
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PromptTemplate` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PromptTemplate
 * 
 */
export type PromptTemplateModel = runtime.Types.Result.DefaultSelection<Prisma.$PromptTemplatePayload>

export type AggregatePromptTemplate = {
  _count: PromptTemplateCountAggregateOutputType | null
  _min: PromptTemplateMinAggregateOutputType | null
  _max: PromptTemplateMaxAggregateOutputType | null
}

export type PromptTemplateMinAggregateOutputType = {
  id: string | null
  name: string | null
  nameEn: string | null
  description: string | null
  content: string | null
  category: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PromptTemplateMaxAggregateOutputType = {
  id: string | null
  name: string | null
  nameEn: string | null
  description: string | null
  content: string | null
  category: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PromptTemplateCountAggregateOutputType = {
  id: number
  name: number
  nameEn: number
  description: number
  content: number
  category: number
  isActive: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PromptTemplateMinAggregateInputType = {
  id?: true
  name?: true
  nameEn?: true
  description?: true
  content?: true
  category?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type PromptTemplateMaxAggregateInputType = {
  id?: true
  name?: true
  nameEn?: true
  description?: true
  content?: true
  category?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type PromptTemplateCountAggregateInputType = {
  id?: true
  name?: true
  nameEn?: true
  description?: true
  content?: true
  category?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PromptTemplateAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PromptTemplate to aggregate.
   */
  where?: Prisma.PromptTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromptTemplates to fetch.
   */
  orderBy?: Prisma.PromptTemplateOrderByWithRelationInput | Prisma.PromptTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PromptTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromptTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromptTemplates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PromptTemplates
  **/
  _count?: true | PromptTemplateCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PromptTemplateMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PromptTemplateMaxAggregateInputType
}

export type GetPromptTemplateAggregateType<T extends PromptTemplateAggregateArgs> = {
      [P in keyof T & keyof AggregatePromptTemplate]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePromptTemplate[P]>
    : Prisma.GetScalarType<T[P], AggregatePromptTemplate[P]>
}




export type PromptTemplateGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PromptTemplateWhereInput
  orderBy?: Prisma.PromptTemplateOrderByWithAggregationInput | Prisma.PromptTemplateOrderByWithAggregationInput[]
  by: Prisma.PromptTemplateScalarFieldEnum[] | Prisma.PromptTemplateScalarFieldEnum
  having?: Prisma.PromptTemplateScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PromptTemplateCountAggregateInputType | true
  _min?: PromptTemplateMinAggregateInputType
  _max?: PromptTemplateMaxAggregateInputType
}

export type PromptTemplateGroupByOutputType = {
  id: string
  name: string
  nameEn: string
  description: string
  content: string
  category: string
  isActive: boolean
  createdAt: Date
  updatedAt: Date
  _count: PromptTemplateCountAggregateOutputType | null
  _min: PromptTemplateMinAggregateOutputType | null
  _max: PromptTemplateMaxAggregateOutputType | null
}

type GetPromptTemplateGroupByPayload<T extends PromptTemplateGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PromptTemplateGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PromptTemplateGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PromptTemplateGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PromptTemplateGroupByOutputType[P]>
      }
    >
  > 



export type PromptTemplateWhereInput = {
  AND?: Prisma.PromptTemplateWhereInput | Prisma.PromptTemplateWhereInput[]
  OR?: Prisma.PromptTemplateWhereInput[]
  NOT?: Prisma.PromptTemplateWhereInput | Prisma.PromptTemplateWhereInput[]
  id?: Prisma.StringFilter<"PromptTemplate"> | string
  name?: Prisma.StringFilter<"PromptTemplate"> | string
  nameEn?: Prisma.StringFilter<"PromptTemplate"> | string
  description?: Prisma.StringFilter<"PromptTemplate"> | string
  content?: Prisma.StringFilter<"PromptTemplate"> | string
  category?: Prisma.StringFilter<"PromptTemplate"> | string
  isActive?: Prisma.BoolFilter<"PromptTemplate"> | boolean
  createdAt?: Prisma.DateTimeFilter<"PromptTemplate"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PromptTemplate"> | Date | string
}

export type PromptTemplateOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nameEn?: Prisma.SortOrder
  description?: Prisma.SortOrder
  content?: Prisma.SortOrder
  category?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PromptTemplateWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.PromptTemplateWhereInput | Prisma.PromptTemplateWhereInput[]
  OR?: Prisma.PromptTemplateWhereInput[]
  NOT?: Prisma.PromptTemplateWhereInput | Prisma.PromptTemplateWhereInput[]
  nameEn?: Prisma.StringFilter<"PromptTemplate"> | string
  description?: Prisma.StringFilter<"PromptTemplate"> | string
  content?: Prisma.StringFilter<"PromptTemplate"> | string
  category?: Prisma.StringFilter<"PromptTemplate"> | string
  isActive?: Prisma.BoolFilter<"PromptTemplate"> | boolean
  createdAt?: Prisma.DateTimeFilter<"PromptTemplate"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PromptTemplate"> | Date | string
}, "id" | "name">

export type PromptTemplateOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nameEn?: Prisma.SortOrder
  description?: Prisma.SortOrder
  content?: Prisma.SortOrder
  category?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PromptTemplateCountOrderByAggregateInput
  _max?: Prisma.PromptTemplateMaxOrderByAggregateInput
  _min?: Prisma.PromptTemplateMinOrderByAggregateInput
}

export type PromptTemplateScalarWhereWithAggregatesInput = {
  AND?: Prisma.PromptTemplateScalarWhereWithAggregatesInput | Prisma.PromptTemplateScalarWhereWithAggregatesInput[]
  OR?: Prisma.PromptTemplateScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PromptTemplateScalarWhereWithAggregatesInput | Prisma.PromptTemplateScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PromptTemplate"> | string
  name?: Prisma.StringWithAggregatesFilter<"PromptTemplate"> | string
  nameEn?: Prisma.StringWithAggregatesFilter<"PromptTemplate"> | string
  description?: Prisma.StringWithAggregatesFilter<"PromptTemplate"> | string
  content?: Prisma.StringWithAggregatesFilter<"PromptTemplate"> | string
  category?: Prisma.StringWithAggregatesFilter<"PromptTemplate"> | string
  isActive?: Prisma.BoolWithAggregatesFilter<"PromptTemplate"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PromptTemplate"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PromptTemplate"> | Date | string
}

export type PromptTemplateCreateInput = {
  id?: string
  name: string
  nameEn: string
  description: string
  content: string
  category: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PromptTemplateUncheckedCreateInput = {
  id?: string
  name: string
  nameEn: string
  description: string
  content: string
  category: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PromptTemplateUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nameEn?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PromptTemplateUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nameEn?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PromptTemplateCreateManyInput = {
  id?: string
  name: string
  nameEn: string
  description: string
  content: string
  category: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PromptTemplateUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nameEn?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PromptTemplateUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  nameEn?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PromptTemplateCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nameEn?: Prisma.SortOrder
  description?: Prisma.SortOrder
  content?: Prisma.SortOrder
  category?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PromptTemplateMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nameEn?: Prisma.SortOrder
  description?: Prisma.SortOrder
  content?: Prisma.SortOrder
  category?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PromptTemplateMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  nameEn?: Prisma.SortOrder
  description?: Prisma.SortOrder
  content?: Prisma.SortOrder
  category?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}



export type PromptTemplateSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  nameEn?: boolean
  description?: boolean
  content?: boolean
  category?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["promptTemplate"]>

export type PromptTemplateSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  nameEn?: boolean
  description?: boolean
  content?: boolean
  category?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["promptTemplate"]>

export type PromptTemplateSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  nameEn?: boolean
  description?: boolean
  content?: boolean
  category?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["promptTemplate"]>

export type PromptTemplateSelectScalar = {
  id?: boolean
  name?: boolean
  nameEn?: boolean
  description?: boolean
  content?: boolean
  category?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PromptTemplateOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "nameEn" | "description" | "content" | "category" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["promptTemplate"]>

export type $PromptTemplatePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PromptTemplate"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    nameEn: string
    description: string
    content: string
    category: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["promptTemplate"]>
  composites: {}
}

export type PromptTemplateGetPayload<S extends boolean | null | undefined | PromptTemplateDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload, S>

export type PromptTemplateCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PromptTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PromptTemplateCountAggregateInputType | true
  }

export interface PromptTemplateDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PromptTemplate'], meta: { name: 'PromptTemplate' } }
  /**
   * Find zero or one PromptTemplate that matches the filter.
   * @param {PromptTemplateFindUniqueArgs} args - Arguments to find a PromptTemplate
   * @example
   * // Get one PromptTemplate
   * const promptTemplate = await prisma.promptTemplate.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PromptTemplateFindUniqueArgs>(args: Prisma.SelectSubset<T, PromptTemplateFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PromptTemplateClient<runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PromptTemplate that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PromptTemplateFindUniqueOrThrowArgs} args - Arguments to find a PromptTemplate
   * @example
   * // Get one PromptTemplate
   * const promptTemplate = await prisma.promptTemplate.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PromptTemplateFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PromptTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PromptTemplateClient<runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PromptTemplate that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromptTemplateFindFirstArgs} args - Arguments to find a PromptTemplate
   * @example
   * // Get one PromptTemplate
   * const promptTemplate = await prisma.promptTemplate.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PromptTemplateFindFirstArgs>(args?: Prisma.SelectSubset<T, PromptTemplateFindFirstArgs<ExtArgs>>): Prisma.Prisma__PromptTemplateClient<runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PromptTemplate that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromptTemplateFindFirstOrThrowArgs} args - Arguments to find a PromptTemplate
   * @example
   * // Get one PromptTemplate
   * const promptTemplate = await prisma.promptTemplate.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PromptTemplateFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PromptTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PromptTemplateClient<runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PromptTemplates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromptTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PromptTemplates
   * const promptTemplates = await prisma.promptTemplate.findMany()
   * 
   * // Get first 10 PromptTemplates
   * const promptTemplates = await prisma.promptTemplate.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const promptTemplateWithIdOnly = await prisma.promptTemplate.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PromptTemplateFindManyArgs>(args?: Prisma.SelectSubset<T, PromptTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PromptTemplate.
   * @param {PromptTemplateCreateArgs} args - Arguments to create a PromptTemplate.
   * @example
   * // Create one PromptTemplate
   * const PromptTemplate = await prisma.promptTemplate.create({
   *   data: {
   *     // ... data to create a PromptTemplate
   *   }
   * })
   * 
   */
  create<T extends PromptTemplateCreateArgs>(args: Prisma.SelectSubset<T, PromptTemplateCreateArgs<ExtArgs>>): Prisma.Prisma__PromptTemplateClient<runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PromptTemplates.
   * @param {PromptTemplateCreateManyArgs} args - Arguments to create many PromptTemplates.
   * @example
   * // Create many PromptTemplates
   * const promptTemplate = await prisma.promptTemplate.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PromptTemplateCreateManyArgs>(args?: Prisma.SelectSubset<T, PromptTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PromptTemplates and returns the data saved in the database.
   * @param {PromptTemplateCreateManyAndReturnArgs} args - Arguments to create many PromptTemplates.
   * @example
   * // Create many PromptTemplates
   * const promptTemplate = await prisma.promptTemplate.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PromptTemplates and only return the `id`
   * const promptTemplateWithIdOnly = await prisma.promptTemplate.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PromptTemplateCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PromptTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PromptTemplate.
   * @param {PromptTemplateDeleteArgs} args - Arguments to delete one PromptTemplate.
   * @example
   * // Delete one PromptTemplate
   * const PromptTemplate = await prisma.promptTemplate.delete({
   *   where: {
   *     // ... filter to delete one PromptTemplate
   *   }
   * })
   * 
   */
  delete<T extends PromptTemplateDeleteArgs>(args: Prisma.SelectSubset<T, PromptTemplateDeleteArgs<ExtArgs>>): Prisma.Prisma__PromptTemplateClient<runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PromptTemplate.
   * @param {PromptTemplateUpdateArgs} args - Arguments to update one PromptTemplate.
   * @example
   * // Update one PromptTemplate
   * const promptTemplate = await prisma.promptTemplate.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PromptTemplateUpdateArgs>(args: Prisma.SelectSubset<T, PromptTemplateUpdateArgs<ExtArgs>>): Prisma.Prisma__PromptTemplateClient<runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PromptTemplates.
   * @param {PromptTemplateDeleteManyArgs} args - Arguments to filter PromptTemplates to delete.
   * @example
   * // Delete a few PromptTemplates
   * const { count } = await prisma.promptTemplate.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PromptTemplateDeleteManyArgs>(args?: Prisma.SelectSubset<T, PromptTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PromptTemplates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromptTemplateUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PromptTemplates
   * const promptTemplate = await prisma.promptTemplate.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PromptTemplateUpdateManyArgs>(args: Prisma.SelectSubset<T, PromptTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PromptTemplates and returns the data updated in the database.
   * @param {PromptTemplateUpdateManyAndReturnArgs} args - Arguments to update many PromptTemplates.
   * @example
   * // Update many PromptTemplates
   * const promptTemplate = await prisma.promptTemplate.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PromptTemplates and only return the `id`
   * const promptTemplateWithIdOnly = await prisma.promptTemplate.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PromptTemplateUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PromptTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PromptTemplate.
   * @param {PromptTemplateUpsertArgs} args - Arguments to update or create a PromptTemplate.
   * @example
   * // Update or create a PromptTemplate
   * const promptTemplate = await prisma.promptTemplate.upsert({
   *   create: {
   *     // ... data to create a PromptTemplate
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PromptTemplate we want to update
   *   }
   * })
   */
  upsert<T extends PromptTemplateUpsertArgs>(args: Prisma.SelectSubset<T, PromptTemplateUpsertArgs<ExtArgs>>): Prisma.Prisma__PromptTemplateClient<runtime.Types.Result.GetResult<Prisma.$PromptTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PromptTemplates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromptTemplateCountArgs} args - Arguments to filter PromptTemplates to count.
   * @example
   * // Count the number of PromptTemplates
   * const count = await prisma.promptTemplate.count({
   *   where: {
   *     // ... the filter for the PromptTemplates we want to count
   *   }
   * })
  **/
  count<T extends PromptTemplateCountArgs>(
    args?: Prisma.Subset<T, PromptTemplateCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PromptTemplateCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PromptTemplate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromptTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PromptTemplateAggregateArgs>(args: Prisma.Subset<T, PromptTemplateAggregateArgs>): Prisma.PrismaPromise<GetPromptTemplateAggregateType<T>>

  /**
   * Group by PromptTemplate.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromptTemplateGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PromptTemplateGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PromptTemplateGroupByArgs['orderBy'] }
      : { orderBy?: PromptTemplateGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PromptTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromptTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PromptTemplate model
 */
readonly fields: PromptTemplateFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PromptTemplate.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PromptTemplateClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PromptTemplate model
 */
export interface PromptTemplateFieldRefs {
  readonly id: Prisma.FieldRef<"PromptTemplate", 'String'>
  readonly name: Prisma.FieldRef<"PromptTemplate", 'String'>
  readonly nameEn: Prisma.FieldRef<"PromptTemplate", 'String'>
  readonly description: Prisma.FieldRef<"PromptTemplate", 'String'>
  readonly content: Prisma.FieldRef<"PromptTemplate", 'String'>
  readonly category: Prisma.FieldRef<"PromptTemplate", 'String'>
  readonly isActive: Prisma.FieldRef<"PromptTemplate", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"PromptTemplate", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PromptTemplate", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PromptTemplate findUnique
 */
export type PromptTemplateFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
  /**
   * Filter, which PromptTemplate to fetch.
   */
  where: Prisma.PromptTemplateWhereUniqueInput
}

/**
 * PromptTemplate findUniqueOrThrow
 */
export type PromptTemplateFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
  /**
   * Filter, which PromptTemplate to fetch.
   */
  where: Prisma.PromptTemplateWhereUniqueInput
}

/**
 * PromptTemplate findFirst
 */
export type PromptTemplateFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
  /**
   * Filter, which PromptTemplate to fetch.
   */
  where?: Prisma.PromptTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromptTemplates to fetch.
   */
  orderBy?: Prisma.PromptTemplateOrderByWithRelationInput | Prisma.PromptTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PromptTemplates.
   */
  cursor?: Prisma.PromptTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromptTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromptTemplates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PromptTemplates.
   */
  distinct?: Prisma.PromptTemplateScalarFieldEnum | Prisma.PromptTemplateScalarFieldEnum[]
}

/**
 * PromptTemplate findFirstOrThrow
 */
export type PromptTemplateFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
  /**
   * Filter, which PromptTemplate to fetch.
   */
  where?: Prisma.PromptTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromptTemplates to fetch.
   */
  orderBy?: Prisma.PromptTemplateOrderByWithRelationInput | Prisma.PromptTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PromptTemplates.
   */
  cursor?: Prisma.PromptTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromptTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromptTemplates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PromptTemplates.
   */
  distinct?: Prisma.PromptTemplateScalarFieldEnum | Prisma.PromptTemplateScalarFieldEnum[]
}

/**
 * PromptTemplate findMany
 */
export type PromptTemplateFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
  /**
   * Filter, which PromptTemplates to fetch.
   */
  where?: Prisma.PromptTemplateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromptTemplates to fetch.
   */
  orderBy?: Prisma.PromptTemplateOrderByWithRelationInput | Prisma.PromptTemplateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PromptTemplates.
   */
  cursor?: Prisma.PromptTemplateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromptTemplates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromptTemplates.
   */
  skip?: number
  distinct?: Prisma.PromptTemplateScalarFieldEnum | Prisma.PromptTemplateScalarFieldEnum[]
}

/**
 * PromptTemplate create
 */
export type PromptTemplateCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
  /**
   * The data needed to create a PromptTemplate.
   */
  data: Prisma.XOR<Prisma.PromptTemplateCreateInput, Prisma.PromptTemplateUncheckedCreateInput>
}

/**
 * PromptTemplate createMany
 */
export type PromptTemplateCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PromptTemplates.
   */
  data: Prisma.PromptTemplateCreateManyInput | Prisma.PromptTemplateCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PromptTemplate createManyAndReturn
 */
export type PromptTemplateCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
  /**
   * The data used to create many PromptTemplates.
   */
  data: Prisma.PromptTemplateCreateManyInput | Prisma.PromptTemplateCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PromptTemplate update
 */
export type PromptTemplateUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
  /**
   * The data needed to update a PromptTemplate.
   */
  data: Prisma.XOR<Prisma.PromptTemplateUpdateInput, Prisma.PromptTemplateUncheckedUpdateInput>
  /**
   * Choose, which PromptTemplate to update.
   */
  where: Prisma.PromptTemplateWhereUniqueInput
}

/**
 * PromptTemplate updateMany
 */
export type PromptTemplateUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PromptTemplates.
   */
  data: Prisma.XOR<Prisma.PromptTemplateUpdateManyMutationInput, Prisma.PromptTemplateUncheckedUpdateManyInput>
  /**
   * Filter which PromptTemplates to update
   */
  where?: Prisma.PromptTemplateWhereInput
  /**
   * Limit how many PromptTemplates to update.
   */
  limit?: number
}

/**
 * PromptTemplate updateManyAndReturn
 */
export type PromptTemplateUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
  /**
   * The data used to update PromptTemplates.
   */
  data: Prisma.XOR<Prisma.PromptTemplateUpdateManyMutationInput, Prisma.PromptTemplateUncheckedUpdateManyInput>
  /**
   * Filter which PromptTemplates to update
   */
  where?: Prisma.PromptTemplateWhereInput
  /**
   * Limit how many PromptTemplates to update.
   */
  limit?: number
}

/**
 * PromptTemplate upsert
 */
export type PromptTemplateUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
  /**
   * The filter to search for the PromptTemplate to update in case it exists.
   */
  where: Prisma.PromptTemplateWhereUniqueInput
  /**
   * In case the PromptTemplate found by the `where` argument doesn't exist, create a new PromptTemplate with this data.
   */
  create: Prisma.XOR<Prisma.PromptTemplateCreateInput, Prisma.PromptTemplateUncheckedCreateInput>
  /**
   * In case the PromptTemplate was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PromptTemplateUpdateInput, Prisma.PromptTemplateUncheckedUpdateInput>
}

/**
 * PromptTemplate delete
 */
export type PromptTemplateDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
  /**
   * Filter which PromptTemplate to delete.
   */
  where: Prisma.PromptTemplateWhereUniqueInput
}

/**
 * PromptTemplate deleteMany
 */
export type PromptTemplateDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PromptTemplates to delete
   */
  where?: Prisma.PromptTemplateWhereInput
  /**
   * Limit how many PromptTemplates to delete.
   */
  limit?: number
}

/**
 * PromptTemplate without action
 */
export type PromptTemplateDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromptTemplate
   */
  select?: Prisma.PromptTemplateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromptTemplate
   */
  omit?: Prisma.PromptTemplateOmit<ExtArgs> | null
}
