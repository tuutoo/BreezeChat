
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `AdditionalPrompt` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AdditionalPrompt
 * 
 */
export type AdditionalPromptModel = runtime.Types.Result.DefaultSelection<Prisma.$AdditionalPromptPayload>

export type AggregateAdditionalPrompt = {
  _count: AdditionalPromptCountAggregateOutputType | null
  _avg: AdditionalPromptAvgAggregateOutputType | null
  _sum: AdditionalPromptSumAggregateOutputType | null
  _min: AdditionalPromptMinAggregateOutputType | null
  _max: AdditionalPromptMaxAggregateOutputType | null
}

export type AdditionalPromptAvgAggregateOutputType = {
  sort: number | null
}

export type AdditionalPromptSumAggregateOutputType = {
  sort: number | null
}

export type AdditionalPromptMinAggregateOutputType = {
  id: string | null
  name: string | null
  prompt: string | null
  category: $Enums.PromptCategory | null
  sort: number | null
  isActive: boolean | null
  isDefault: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AdditionalPromptMaxAggregateOutputType = {
  id: string | null
  name: string | null
  prompt: string | null
  category: $Enums.PromptCategory | null
  sort: number | null
  isActive: boolean | null
  isDefault: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AdditionalPromptCountAggregateOutputType = {
  id: number
  name: number
  prompt: number
  category: number
  sort: number
  isActive: number
  isDefault: number
  applicableScenes: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AdditionalPromptAvgAggregateInputType = {
  sort?: true
}

export type AdditionalPromptSumAggregateInputType = {
  sort?: true
}

export type AdditionalPromptMinAggregateInputType = {
  id?: true
  name?: true
  prompt?: true
  category?: true
  sort?: true
  isActive?: true
  isDefault?: true
  createdAt?: true
  updatedAt?: true
}

export type AdditionalPromptMaxAggregateInputType = {
  id?: true
  name?: true
  prompt?: true
  category?: true
  sort?: true
  isActive?: true
  isDefault?: true
  createdAt?: true
  updatedAt?: true
}

export type AdditionalPromptCountAggregateInputType = {
  id?: true
  name?: true
  prompt?: true
  category?: true
  sort?: true
  isActive?: true
  isDefault?: true
  applicableScenes?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AdditionalPromptAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AdditionalPrompt to aggregate.
   */
  where?: Prisma.AdditionalPromptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdditionalPrompts to fetch.
   */
  orderBy?: Prisma.AdditionalPromptOrderByWithRelationInput | Prisma.AdditionalPromptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AdditionalPromptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdditionalPrompts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdditionalPrompts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AdditionalPrompts
  **/
  _count?: true | AdditionalPromptCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AdditionalPromptAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AdditionalPromptSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AdditionalPromptMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AdditionalPromptMaxAggregateInputType
}

export type GetAdditionalPromptAggregateType<T extends AdditionalPromptAggregateArgs> = {
      [P in keyof T & keyof AggregateAdditionalPrompt]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAdditionalPrompt[P]>
    : Prisma.GetScalarType<T[P], AggregateAdditionalPrompt[P]>
}




export type AdditionalPromptGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdditionalPromptWhereInput
  orderBy?: Prisma.AdditionalPromptOrderByWithAggregationInput | Prisma.AdditionalPromptOrderByWithAggregationInput[]
  by: Prisma.AdditionalPromptScalarFieldEnum[] | Prisma.AdditionalPromptScalarFieldEnum
  having?: Prisma.AdditionalPromptScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AdditionalPromptCountAggregateInputType | true
  _avg?: AdditionalPromptAvgAggregateInputType
  _sum?: AdditionalPromptSumAggregateInputType
  _min?: AdditionalPromptMinAggregateInputType
  _max?: AdditionalPromptMaxAggregateInputType
}

export type AdditionalPromptGroupByOutputType = {
  id: string
  name: string
  prompt: string
  category: $Enums.PromptCategory
  sort: number
  isActive: boolean
  isDefault: boolean
  applicableScenes: string[]
  createdAt: Date
  updatedAt: Date
  _count: AdditionalPromptCountAggregateOutputType | null
  _avg: AdditionalPromptAvgAggregateOutputType | null
  _sum: AdditionalPromptSumAggregateOutputType | null
  _min: AdditionalPromptMinAggregateOutputType | null
  _max: AdditionalPromptMaxAggregateOutputType | null
}

type GetAdditionalPromptGroupByPayload<T extends AdditionalPromptGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AdditionalPromptGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AdditionalPromptGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AdditionalPromptGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AdditionalPromptGroupByOutputType[P]>
      }
    >
  > 



export type AdditionalPromptWhereInput = {
  AND?: Prisma.AdditionalPromptWhereInput | Prisma.AdditionalPromptWhereInput[]
  OR?: Prisma.AdditionalPromptWhereInput[]
  NOT?: Prisma.AdditionalPromptWhereInput | Prisma.AdditionalPromptWhereInput[]
  id?: Prisma.StringFilter<"AdditionalPrompt"> | string
  name?: Prisma.StringFilter<"AdditionalPrompt"> | string
  prompt?: Prisma.StringFilter<"AdditionalPrompt"> | string
  category?: Prisma.EnumPromptCategoryFilter<"AdditionalPrompt"> | $Enums.PromptCategory
  sort?: Prisma.IntFilter<"AdditionalPrompt"> | number
  isActive?: Prisma.BoolFilter<"AdditionalPrompt"> | boolean
  isDefault?: Prisma.BoolFilter<"AdditionalPrompt"> | boolean
  applicableScenes?: Prisma.StringNullableListFilter<"AdditionalPrompt">
  createdAt?: Prisma.DateTimeFilter<"AdditionalPrompt"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AdditionalPrompt"> | Date | string
}

export type AdditionalPromptOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  prompt?: Prisma.SortOrder
  category?: Prisma.SortOrder
  sort?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  applicableScenes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdditionalPromptWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.AdditionalPromptWhereInput | Prisma.AdditionalPromptWhereInput[]
  OR?: Prisma.AdditionalPromptWhereInput[]
  NOT?: Prisma.AdditionalPromptWhereInput | Prisma.AdditionalPromptWhereInput[]
  prompt?: Prisma.StringFilter<"AdditionalPrompt"> | string
  category?: Prisma.EnumPromptCategoryFilter<"AdditionalPrompt"> | $Enums.PromptCategory
  sort?: Prisma.IntFilter<"AdditionalPrompt"> | number
  isActive?: Prisma.BoolFilter<"AdditionalPrompt"> | boolean
  isDefault?: Prisma.BoolFilter<"AdditionalPrompt"> | boolean
  applicableScenes?: Prisma.StringNullableListFilter<"AdditionalPrompt">
  createdAt?: Prisma.DateTimeFilter<"AdditionalPrompt"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AdditionalPrompt"> | Date | string
}, "id" | "name">

export type AdditionalPromptOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  prompt?: Prisma.SortOrder
  category?: Prisma.SortOrder
  sort?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  applicableScenes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AdditionalPromptCountOrderByAggregateInput
  _avg?: Prisma.AdditionalPromptAvgOrderByAggregateInput
  _max?: Prisma.AdditionalPromptMaxOrderByAggregateInput
  _min?: Prisma.AdditionalPromptMinOrderByAggregateInput
  _sum?: Prisma.AdditionalPromptSumOrderByAggregateInput
}

export type AdditionalPromptScalarWhereWithAggregatesInput = {
  AND?: Prisma.AdditionalPromptScalarWhereWithAggregatesInput | Prisma.AdditionalPromptScalarWhereWithAggregatesInput[]
  OR?: Prisma.AdditionalPromptScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AdditionalPromptScalarWhereWithAggregatesInput | Prisma.AdditionalPromptScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AdditionalPrompt"> | string
  name?: Prisma.StringWithAggregatesFilter<"AdditionalPrompt"> | string
  prompt?: Prisma.StringWithAggregatesFilter<"AdditionalPrompt"> | string
  category?: Prisma.EnumPromptCategoryWithAggregatesFilter<"AdditionalPrompt"> | $Enums.PromptCategory
  sort?: Prisma.IntWithAggregatesFilter<"AdditionalPrompt"> | number
  isActive?: Prisma.BoolWithAggregatesFilter<"AdditionalPrompt"> | boolean
  isDefault?: Prisma.BoolWithAggregatesFilter<"AdditionalPrompt"> | boolean
  applicableScenes?: Prisma.StringNullableListFilter<"AdditionalPrompt">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AdditionalPrompt"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AdditionalPrompt"> | Date | string
}

export type AdditionalPromptCreateInput = {
  id?: string
  name: string
  prompt: string
  category: $Enums.PromptCategory
  sort?: number
  isActive?: boolean
  isDefault?: boolean
  applicableScenes?: Prisma.AdditionalPromptCreateapplicableScenesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AdditionalPromptUncheckedCreateInput = {
  id?: string
  name: string
  prompt: string
  category: $Enums.PromptCategory
  sort?: number
  isActive?: boolean
  isDefault?: boolean
  applicableScenes?: Prisma.AdditionalPromptCreateapplicableScenesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AdditionalPromptUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  prompt?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumPromptCategoryFieldUpdateOperationsInput | $Enums.PromptCategory
  sort?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicableScenes?: Prisma.AdditionalPromptUpdateapplicableScenesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdditionalPromptUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  prompt?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumPromptCategoryFieldUpdateOperationsInput | $Enums.PromptCategory
  sort?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicableScenes?: Prisma.AdditionalPromptUpdateapplicableScenesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdditionalPromptCreateManyInput = {
  id?: string
  name: string
  prompt: string
  category: $Enums.PromptCategory
  sort?: number
  isActive?: boolean
  isDefault?: boolean
  applicableScenes?: Prisma.AdditionalPromptCreateapplicableScenesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AdditionalPromptUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  prompt?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumPromptCategoryFieldUpdateOperationsInput | $Enums.PromptCategory
  sort?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicableScenes?: Prisma.AdditionalPromptUpdateapplicableScenesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AdditionalPromptUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  prompt?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.EnumPromptCategoryFieldUpdateOperationsInput | $Enums.PromptCategory
  sort?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  applicableScenes?: Prisma.AdditionalPromptUpdateapplicableScenesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type AdditionalPromptCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  prompt?: Prisma.SortOrder
  category?: Prisma.SortOrder
  sort?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  applicableScenes?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdditionalPromptAvgOrderByAggregateInput = {
  sort?: Prisma.SortOrder
}

export type AdditionalPromptMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  prompt?: Prisma.SortOrder
  category?: Prisma.SortOrder
  sort?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdditionalPromptMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  prompt?: Prisma.SortOrder
  category?: Prisma.SortOrder
  sort?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AdditionalPromptSumOrderByAggregateInput = {
  sort?: Prisma.SortOrder
}

export type AdditionalPromptCreateapplicableScenesInput = {
  set: string[]
}

export type EnumPromptCategoryFieldUpdateOperationsInput = {
  set?: $Enums.PromptCategory
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type AdditionalPromptUpdateapplicableScenesInput = {
  set?: string[]
  push?: string | string[]
}



export type AdditionalPromptSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  prompt?: boolean
  category?: boolean
  sort?: boolean
  isActive?: boolean
  isDefault?: boolean
  applicableScenes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["additionalPrompt"]>

export type AdditionalPromptSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  prompt?: boolean
  category?: boolean
  sort?: boolean
  isActive?: boolean
  isDefault?: boolean
  applicableScenes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["additionalPrompt"]>

export type AdditionalPromptSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  prompt?: boolean
  category?: boolean
  sort?: boolean
  isActive?: boolean
  isDefault?: boolean
  applicableScenes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["additionalPrompt"]>

export type AdditionalPromptSelectScalar = {
  id?: boolean
  name?: boolean
  prompt?: boolean
  category?: boolean
  sort?: boolean
  isActive?: boolean
  isDefault?: boolean
  applicableScenes?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AdditionalPromptOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "prompt" | "category" | "sort" | "isActive" | "isDefault" | "applicableScenes" | "createdAt" | "updatedAt", ExtArgs["result"]["additionalPrompt"]>

export type $AdditionalPromptPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AdditionalPrompt"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    prompt: string
    category: $Enums.PromptCategory
    sort: number
    isActive: boolean
    isDefault: boolean
    applicableScenes: string[]
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["additionalPrompt"]>
  composites: {}
}

export type AdditionalPromptGetPayload<S extends boolean | null | undefined | AdditionalPromptDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload, S>

export type AdditionalPromptCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AdditionalPromptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AdditionalPromptCountAggregateInputType | true
  }

export interface AdditionalPromptDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdditionalPrompt'], meta: { name: 'AdditionalPrompt' } }
  /**
   * Find zero or one AdditionalPrompt that matches the filter.
   * @param {AdditionalPromptFindUniqueArgs} args - Arguments to find a AdditionalPrompt
   * @example
   * // Get one AdditionalPrompt
   * const additionalPrompt = await prisma.additionalPrompt.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AdditionalPromptFindUniqueArgs>(args: Prisma.SelectSubset<T, AdditionalPromptFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AdditionalPromptClient<runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AdditionalPrompt that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AdditionalPromptFindUniqueOrThrowArgs} args - Arguments to find a AdditionalPrompt
   * @example
   * // Get one AdditionalPrompt
   * const additionalPrompt = await prisma.additionalPrompt.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AdditionalPromptFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AdditionalPromptFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdditionalPromptClient<runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AdditionalPrompt that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdditionalPromptFindFirstArgs} args - Arguments to find a AdditionalPrompt
   * @example
   * // Get one AdditionalPrompt
   * const additionalPrompt = await prisma.additionalPrompt.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AdditionalPromptFindFirstArgs>(args?: Prisma.SelectSubset<T, AdditionalPromptFindFirstArgs<ExtArgs>>): Prisma.Prisma__AdditionalPromptClient<runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AdditionalPrompt that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdditionalPromptFindFirstOrThrowArgs} args - Arguments to find a AdditionalPrompt
   * @example
   * // Get one AdditionalPrompt
   * const additionalPrompt = await prisma.additionalPrompt.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AdditionalPromptFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AdditionalPromptFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdditionalPromptClient<runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AdditionalPrompts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdditionalPromptFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AdditionalPrompts
   * const additionalPrompts = await prisma.additionalPrompt.findMany()
   * 
   * // Get first 10 AdditionalPrompts
   * const additionalPrompts = await prisma.additionalPrompt.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const additionalPromptWithIdOnly = await prisma.additionalPrompt.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AdditionalPromptFindManyArgs>(args?: Prisma.SelectSubset<T, AdditionalPromptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AdditionalPrompt.
   * @param {AdditionalPromptCreateArgs} args - Arguments to create a AdditionalPrompt.
   * @example
   * // Create one AdditionalPrompt
   * const AdditionalPrompt = await prisma.additionalPrompt.create({
   *   data: {
   *     // ... data to create a AdditionalPrompt
   *   }
   * })
   * 
   */
  create<T extends AdditionalPromptCreateArgs>(args: Prisma.SelectSubset<T, AdditionalPromptCreateArgs<ExtArgs>>): Prisma.Prisma__AdditionalPromptClient<runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AdditionalPrompts.
   * @param {AdditionalPromptCreateManyArgs} args - Arguments to create many AdditionalPrompts.
   * @example
   * // Create many AdditionalPrompts
   * const additionalPrompt = await prisma.additionalPrompt.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AdditionalPromptCreateManyArgs>(args?: Prisma.SelectSubset<T, AdditionalPromptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AdditionalPrompts and returns the data saved in the database.
   * @param {AdditionalPromptCreateManyAndReturnArgs} args - Arguments to create many AdditionalPrompts.
   * @example
   * // Create many AdditionalPrompts
   * const additionalPrompt = await prisma.additionalPrompt.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AdditionalPrompts and only return the `id`
   * const additionalPromptWithIdOnly = await prisma.additionalPrompt.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AdditionalPromptCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AdditionalPromptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AdditionalPrompt.
   * @param {AdditionalPromptDeleteArgs} args - Arguments to delete one AdditionalPrompt.
   * @example
   * // Delete one AdditionalPrompt
   * const AdditionalPrompt = await prisma.additionalPrompt.delete({
   *   where: {
   *     // ... filter to delete one AdditionalPrompt
   *   }
   * })
   * 
   */
  delete<T extends AdditionalPromptDeleteArgs>(args: Prisma.SelectSubset<T, AdditionalPromptDeleteArgs<ExtArgs>>): Prisma.Prisma__AdditionalPromptClient<runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AdditionalPrompt.
   * @param {AdditionalPromptUpdateArgs} args - Arguments to update one AdditionalPrompt.
   * @example
   * // Update one AdditionalPrompt
   * const additionalPrompt = await prisma.additionalPrompt.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AdditionalPromptUpdateArgs>(args: Prisma.SelectSubset<T, AdditionalPromptUpdateArgs<ExtArgs>>): Prisma.Prisma__AdditionalPromptClient<runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AdditionalPrompts.
   * @param {AdditionalPromptDeleteManyArgs} args - Arguments to filter AdditionalPrompts to delete.
   * @example
   * // Delete a few AdditionalPrompts
   * const { count } = await prisma.additionalPrompt.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AdditionalPromptDeleteManyArgs>(args?: Prisma.SelectSubset<T, AdditionalPromptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AdditionalPrompts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdditionalPromptUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AdditionalPrompts
   * const additionalPrompt = await prisma.additionalPrompt.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AdditionalPromptUpdateManyArgs>(args: Prisma.SelectSubset<T, AdditionalPromptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AdditionalPrompts and returns the data updated in the database.
   * @param {AdditionalPromptUpdateManyAndReturnArgs} args - Arguments to update many AdditionalPrompts.
   * @example
   * // Update many AdditionalPrompts
   * const additionalPrompt = await prisma.additionalPrompt.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AdditionalPrompts and only return the `id`
   * const additionalPromptWithIdOnly = await prisma.additionalPrompt.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AdditionalPromptUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AdditionalPromptUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AdditionalPrompt.
   * @param {AdditionalPromptUpsertArgs} args - Arguments to update or create a AdditionalPrompt.
   * @example
   * // Update or create a AdditionalPrompt
   * const additionalPrompt = await prisma.additionalPrompt.upsert({
   *   create: {
   *     // ... data to create a AdditionalPrompt
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AdditionalPrompt we want to update
   *   }
   * })
   */
  upsert<T extends AdditionalPromptUpsertArgs>(args: Prisma.SelectSubset<T, AdditionalPromptUpsertArgs<ExtArgs>>): Prisma.Prisma__AdditionalPromptClient<runtime.Types.Result.GetResult<Prisma.$AdditionalPromptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AdditionalPrompts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdditionalPromptCountArgs} args - Arguments to filter AdditionalPrompts to count.
   * @example
   * // Count the number of AdditionalPrompts
   * const count = await prisma.additionalPrompt.count({
   *   where: {
   *     // ... the filter for the AdditionalPrompts we want to count
   *   }
   * })
  **/
  count<T extends AdditionalPromptCountArgs>(
    args?: Prisma.Subset<T, AdditionalPromptCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AdditionalPromptCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AdditionalPrompt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdditionalPromptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AdditionalPromptAggregateArgs>(args: Prisma.Subset<T, AdditionalPromptAggregateArgs>): Prisma.PrismaPromise<GetAdditionalPromptAggregateType<T>>

  /**
   * Group by AdditionalPrompt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdditionalPromptGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AdditionalPromptGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AdditionalPromptGroupByArgs['orderBy'] }
      : { orderBy?: AdditionalPromptGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AdditionalPromptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdditionalPromptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AdditionalPrompt model
 */
readonly fields: AdditionalPromptFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AdditionalPrompt.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AdditionalPromptClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AdditionalPrompt model
 */
export interface AdditionalPromptFieldRefs {
  readonly id: Prisma.FieldRef<"AdditionalPrompt", 'String'>
  readonly name: Prisma.FieldRef<"AdditionalPrompt", 'String'>
  readonly prompt: Prisma.FieldRef<"AdditionalPrompt", 'String'>
  readonly category: Prisma.FieldRef<"AdditionalPrompt", 'PromptCategory'>
  readonly sort: Prisma.FieldRef<"AdditionalPrompt", 'Int'>
  readonly isActive: Prisma.FieldRef<"AdditionalPrompt", 'Boolean'>
  readonly isDefault: Prisma.FieldRef<"AdditionalPrompt", 'Boolean'>
  readonly applicableScenes: Prisma.FieldRef<"AdditionalPrompt", 'String[]'>
  readonly createdAt: Prisma.FieldRef<"AdditionalPrompt", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AdditionalPrompt", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AdditionalPrompt findUnique
 */
export type AdditionalPromptFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
  /**
   * Filter, which AdditionalPrompt to fetch.
   */
  where: Prisma.AdditionalPromptWhereUniqueInput
}

/**
 * AdditionalPrompt findUniqueOrThrow
 */
export type AdditionalPromptFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
  /**
   * Filter, which AdditionalPrompt to fetch.
   */
  where: Prisma.AdditionalPromptWhereUniqueInput
}

/**
 * AdditionalPrompt findFirst
 */
export type AdditionalPromptFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
  /**
   * Filter, which AdditionalPrompt to fetch.
   */
  where?: Prisma.AdditionalPromptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdditionalPrompts to fetch.
   */
  orderBy?: Prisma.AdditionalPromptOrderByWithRelationInput | Prisma.AdditionalPromptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AdditionalPrompts.
   */
  cursor?: Prisma.AdditionalPromptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdditionalPrompts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdditionalPrompts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AdditionalPrompts.
   */
  distinct?: Prisma.AdditionalPromptScalarFieldEnum | Prisma.AdditionalPromptScalarFieldEnum[]
}

/**
 * AdditionalPrompt findFirstOrThrow
 */
export type AdditionalPromptFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
  /**
   * Filter, which AdditionalPrompt to fetch.
   */
  where?: Prisma.AdditionalPromptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdditionalPrompts to fetch.
   */
  orderBy?: Prisma.AdditionalPromptOrderByWithRelationInput | Prisma.AdditionalPromptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AdditionalPrompts.
   */
  cursor?: Prisma.AdditionalPromptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdditionalPrompts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdditionalPrompts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AdditionalPrompts.
   */
  distinct?: Prisma.AdditionalPromptScalarFieldEnum | Prisma.AdditionalPromptScalarFieldEnum[]
}

/**
 * AdditionalPrompt findMany
 */
export type AdditionalPromptFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
  /**
   * Filter, which AdditionalPrompts to fetch.
   */
  where?: Prisma.AdditionalPromptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AdditionalPrompts to fetch.
   */
  orderBy?: Prisma.AdditionalPromptOrderByWithRelationInput | Prisma.AdditionalPromptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AdditionalPrompts.
   */
  cursor?: Prisma.AdditionalPromptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AdditionalPrompts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AdditionalPrompts.
   */
  skip?: number
  distinct?: Prisma.AdditionalPromptScalarFieldEnum | Prisma.AdditionalPromptScalarFieldEnum[]
}

/**
 * AdditionalPrompt create
 */
export type AdditionalPromptCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
  /**
   * The data needed to create a AdditionalPrompt.
   */
  data: Prisma.XOR<Prisma.AdditionalPromptCreateInput, Prisma.AdditionalPromptUncheckedCreateInput>
}

/**
 * AdditionalPrompt createMany
 */
export type AdditionalPromptCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AdditionalPrompts.
   */
  data: Prisma.AdditionalPromptCreateManyInput | Prisma.AdditionalPromptCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AdditionalPrompt createManyAndReturn
 */
export type AdditionalPromptCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
  /**
   * The data used to create many AdditionalPrompts.
   */
  data: Prisma.AdditionalPromptCreateManyInput | Prisma.AdditionalPromptCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AdditionalPrompt update
 */
export type AdditionalPromptUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
  /**
   * The data needed to update a AdditionalPrompt.
   */
  data: Prisma.XOR<Prisma.AdditionalPromptUpdateInput, Prisma.AdditionalPromptUncheckedUpdateInput>
  /**
   * Choose, which AdditionalPrompt to update.
   */
  where: Prisma.AdditionalPromptWhereUniqueInput
}

/**
 * AdditionalPrompt updateMany
 */
export type AdditionalPromptUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AdditionalPrompts.
   */
  data: Prisma.XOR<Prisma.AdditionalPromptUpdateManyMutationInput, Prisma.AdditionalPromptUncheckedUpdateManyInput>
  /**
   * Filter which AdditionalPrompts to update
   */
  where?: Prisma.AdditionalPromptWhereInput
  /**
   * Limit how many AdditionalPrompts to update.
   */
  limit?: number
}

/**
 * AdditionalPrompt updateManyAndReturn
 */
export type AdditionalPromptUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
  /**
   * The data used to update AdditionalPrompts.
   */
  data: Prisma.XOR<Prisma.AdditionalPromptUpdateManyMutationInput, Prisma.AdditionalPromptUncheckedUpdateManyInput>
  /**
   * Filter which AdditionalPrompts to update
   */
  where?: Prisma.AdditionalPromptWhereInput
  /**
   * Limit how many AdditionalPrompts to update.
   */
  limit?: number
}

/**
 * AdditionalPrompt upsert
 */
export type AdditionalPromptUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
  /**
   * The filter to search for the AdditionalPrompt to update in case it exists.
   */
  where: Prisma.AdditionalPromptWhereUniqueInput
  /**
   * In case the AdditionalPrompt found by the `where` argument doesn't exist, create a new AdditionalPrompt with this data.
   */
  create: Prisma.XOR<Prisma.AdditionalPromptCreateInput, Prisma.AdditionalPromptUncheckedCreateInput>
  /**
   * In case the AdditionalPrompt was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AdditionalPromptUpdateInput, Prisma.AdditionalPromptUncheckedUpdateInput>
}

/**
 * AdditionalPrompt delete
 */
export type AdditionalPromptDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
  /**
   * Filter which AdditionalPrompt to delete.
   */
  where: Prisma.AdditionalPromptWhereUniqueInput
}

/**
 * AdditionalPrompt deleteMany
 */
export type AdditionalPromptDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AdditionalPrompts to delete
   */
  where?: Prisma.AdditionalPromptWhereInput
  /**
   * Limit how many AdditionalPrompts to delete.
   */
  limit?: number
}

/**
 * AdditionalPrompt without action
 */
export type AdditionalPromptDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AdditionalPrompt
   */
  select?: Prisma.AdditionalPromptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AdditionalPrompt
   */
  omit?: Prisma.AdditionalPromptOmit<ExtArgs> | null
}
